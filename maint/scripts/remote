#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os.path
import logging
import argparse
from ftplib import FTP
from ConfigParser import SafeConfigParser
from datetime import datetime


log = logging.getLogger('strass')

class Script(object):
    parser = argparse.ArgumentParser(
        description=u"Gestionnaire de site strass")
    parser.set_defaults(loglevel=logging.INFO)
    parser.add_argument(
        '-v', '--verbose',
        action='store_const', dest='loglevel', const=logging.DEBUG)
    parser.add_argument(
        '-q', '--quiet',
        action='store_const', dest='loglevel', const=logging.CRITICAL)
    parser.add_argument(
        '-c', '--config', default='maint/strass.conf', metavar='FILE')

    subparsers = parser.add_subparsers(metavar='ACTION')

    def __call__(self):
        args = self.parser.parse_args()
        format = "%(asctime)s %(levelname)-8s %(name)s: %(message)s" if args.loglevel is logging.DEBUG else "%(levelname)-8s: %(message)s"
        logging.basicConfig(level=args.loglevel, format=format)

        try:
            config = SafeConfigParser()
            with open(args.config) as f:
                config.readfp(f, args.config)

            return args.action(args, config)
        except Exception, e:
            log.exception(e)
            log.debug("%r", e)
            log.error("%s", e)
            return 1


def command(cls):
    parser = Script.subparsers.add_parser(cls.__name__)
    parser.set_defaults(action=cls(parser))
    return cls


class FTPHelper(object):
    log = logging.getLogger('strass.ftp')

    def __init__(self, config):
        self.config = config
        self.ftp = FTP()


    def __del__(self):
        self.ftp.quit()
        self.ftp.close()


    def connect(self):
        self.ftp.connect(self.config.get('remote', 'hostname'))
        self.ftp.login(self.config.get('remote', 'username'),
                       self.config.get('remote', 'password'))
        self.ftp.cwd(self.config.get('remote', 'root'))
        self.log.debug(u"Connecté à %s", self.config.get('remote', 'hostname'))
        self.log.debug(self.ftp.getwelcome())


    def put(self, path):
        self.ftp.storbinary('STOR ' + path, open(path))
        stat = os.stat(path)
        self.ftp.sendcmd('SITE CHMOD %o %s' % (stat.st_mode, path))
        self.log.debug("Envoi de %s", path)


    def getfile(self, path):
        parent = os.path.dirname(path)
        if parent and not os.path.exists(parent):
            os.makedirs(parent)

        if os.path.exists(path):
            code, data = self.ftp.sendcmd('MDTM %s' % path).split(None, 1)
            assert int(code) == 213
            remote_last_mod = datetime.strptime(data, '%Y%m%d%H%M%S')
            local_last_mod = datetime.fromtimestamp(os.stat(path).st_mtime)
            if local_last_mod > remote_last_mod:
                self.log.debug('%s à jour', path)
                return

        f = open(path, 'wb')
        self.ftp.retrbinary('RETR %s' % path, f.write)
        self.log.debug(u"Réception de %s", path)


    def get(self, path):
        entries = []
        self.ftp.retrlines('LIST -a %s' % path, entries.append)
        _, name = entries[0].rsplit(None, 1)
        if name == '.':
            for entry in entries[2:]:
                _, name= entry.rsplit(None, 1)
                type_ = entry[0]
                childpath = path + '/' + name
                if type_ == 'd':
                    self.get(childpath)
                elif type_ == '-':
                    self.getfile(childpath)
                else:
                    self.log.info('Ignore %s', childpath)
        else:
            self.getfile(path)


    def delete(self, path):
        self.ftp.delete(path)


@command
class setmaint(object):
    log = logging.getLogger('strass.maint')

    def __init__(self, parser):
        pass


    def __call__(self, args, config):
        ftp = FTPHelper(config)
        ftp.connect()
        ftp.put('maintenance.html')
        ftp.put('include/Strass/Version.php')
        ftp.put('index.php')


@command
class unsetmaint(object):
    log = logging.getLogger('strass.maint')

    def __init__(self, parser):
        pass


    def __call__(self, args, config):
        ftp = FTPHelper(config)
        ftp.connect()
        ftp.delete('maintenance.html')


@command
class backup1(object):
    log = logging.getLogger('strass.backup')

    def __init__(self, parser):
        pass


    def __call__(self, args, config):
        ftp = FTPHelper(config)
        ftp.connect()
        ftp.get('resources/styles')
        ftp.get('config')
        ftp.get('data')

main = Script()
sys.exit(main())
