import sys
import os.path
import datetime
import unittest
import io
import fcntl

from selenium.common import exceptions as selexc
from selenium.webdriver import PhantomJS
from selenium.webdriver.support.ui import Select


class Client(object):
    """Client HTTP pour tester fonctionnellement Strass

    Adapteur du pilote Selenium, avec une interface inspirée de Nightwatch.js,
    et quelques paramètres spécifiques à Strass."""

    def __init__(self):
        self.driver = PhantomJS()
        self.driver.set_window_size(1120, 550)

    def __del__(self):
        self.driver.quit()

    def get(self, query=None):
        server = os.environ.get('STRASS_TEST_SERVER', 'http://localhost:8000')
        url = server + (query or '/')
        self.driver.get(url)
        return self

    def find(self, selector):
        return self.driver.find_element_by_css_selector(selector)

    def click(self, selector):
        self.find(selector).click()
        return self

    def fill(self, selector, value):
        if isinstance(value, datetime.date):
            self.fill(selector + ' input.day', str(value.day))
            self.fill(selector + ' input.month', str(value.month))
            self.fill(selector + ' input.year', str(value.year))
        else:
            control = self.find(selector)
            control.clear()
            control.send_keys(value)
        return self

    def select(self, selector, value):
        Select(self.find(selector)).select_by_value(value)
        return self

    def submit(self, selector='#document button[type=submit]'):
        return self.click(selector)

    def close(self):
        self.driver.close()
        if self.driver.window_handles:
            self.driver.switch_to.window(self.driver.window_handles[0])
        self.driver.set_window_size(1120, 550)
        return self

    def screenshot(self, filename):
        self.driver.get_screenshot_as_file(filename)
        sys.stderr.write("Capture d'écran enregistrée dans %r\n" % (filename,))
        return self

    def save(self, filename):
        with open(filename, 'w') as fo:
            fo.write(self.driver.page_source)
        sys.stderr.write("HTML enregistré dans %r\n" % (filename,))
        return self

    def __getattr__(self, name):
        return getattr(self.driver, name)


class ClientTestCase(unittest.TestCase):
    """Classe de test

    Instancie un client strass dans self.client. Sauvegarde une capture d'écran
    et la page HTML courante en cas d'erreur.  La session est permanente pour
    tous les tests de la classe."""

    test_reports = os.environ['STRASS_TEST_REPORTS']

    @classmethod
    def setUpClass(cls):
        cls.client = Client()
        cls.server_log = open(os.environ['SERVER_LOG'], 'r')
        cls.server_log.seek(0, io.SEEK_END)
        fd = cls.server_log.fileno()
        fl = fcntl.fcntl(fd, fcntl.F_GETFL)
        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

    @classmethod
    def tearDownClass(cls):
        del cls.client

    def tearDown(self):
        for test_case, exc_info in self._outcome.errors:
            if not exc_info:
                continue

            self.client.screenshot(
                os.path.join(self.test_reports, self.id() + '.png'))
            self.client.save(
                os.path.join(self.test_reports, self.id() + '.html'))
            with open(self.id() + '.log', 'w') as fo:
                sys.stderr.write("Log PHP enregistré dans %r\n" % (fo.name,))
                fo.write(self.server_log.read())

            break

        self.server_log.seek(0, io.SEEK_END)

        super(ClientTestCase, self).tearDown()

    def assertElementFound(self, selector):
        assert self.client.find(selector)
        return self.client

    def assertElementNotFound(self, selector):
        try:
            self.client.find(selector)
            assert False, "Element %s exists" % (selector,)
        except selexc.NoSuchElementException:
            pass
        return self.client
